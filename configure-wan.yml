---
- name: Read in the cloud inventory
  hosts: localhost
  connection: local
  gather_facts: False
  tasks:

    - include_role:
        name: cloud-inventory
      vars:
        - cloud_vpc_name: "{{ vpc_item.name }}"
        - cloud_vpc_data: "{{ vpc_item }}"
      with_items: "{{ vpc_list | default([]) }}"
      tasks_from: instances
      loop_control:
        loop_var: vpc_item
      delegate_to: localhost
      run_once: yes

- name: Configure the Spokes
  hosts: spokes
  connection: local
  gather_facts: False
  tasks:

    # - debug: var=hostvars[inventory_hostname]
    # - debug: var=interfaces

    - name: wait for SSH prompt (timeout 10min)
      wait_for:
        port: 22
        host: "{{ ansible_host }}"
        timeout: 600

    - name: Set hostname
      eos_config:
        provider:
          username: ec2-user
          host: "{{ ansible_host }}"
          ssh_keyfile: "./{{ cloud_name }}_key"
          authorize: yes
        lines:
          - "hostname {{ inventory_hostname }}"

    - name: Enable the inside interface
      eos_config:
        provider:
          username: ec2-user
          host: "{{ ansible_host }}"
          ssh_keyfile: "./{{ cloud_name }}_key"
          authorize: yes
        parents: "interface {{ interfaces[1].name }}"
        lines:
          - "ip address dhcp"

    - name: Configure BGP
      eos_config:
        provider:
          username: ec2-user
          host: "{{ ansible_host }}"
          ssh_keyfile: "./{{ cloud_name }}_key"
          authorize: yes
        parents: "router bgp {{ cloud_vpc_data.bgp_asn }}"
        lines:
          - "network {{ interfaces[1].private_ip_cidr | ipaddr('network/prefix') }}"
      with_items: "{{ tunnels }}"


- name: Configure the Hubs
  hosts: hubs
  connection: local
  gather_facts: False
  tasks:

    # - debug: var=hostvars[inventory_hostname]

    - name: wait for SSH prompt (timeout 10min)
      wait_for:
        port: 22
        host: "{{ ansible_host }}"
        timeout: 600

    # - name: Configure hostname for {{ inventory_hostname }}
    #   net_system:
    #     hostname: "{{ inventory_hostname }}"
    #     domain_name: 'demo.foo'

    - debug: var=interfaces

    - name: Set hostname
      eos_config:
        provider:
          username: ec2-user
          host: "{{ ansible_host }}"
          ssh_keyfile: "./{{ cloud_name }}_key"
          authorize: yes
        lines:
          - "hostname {{ inventory_hostname }}"

- name: Create Tunnels
  hosts: localhost
  connection: local
  gather_facts: False
  tasks:

    - name: Create the source end of tunnel
      eos_config:
        provider:
          username: ec2-user
          host: "{{ hostvars[item.src_host].ansible_host }}"
          ssh_keyfile: "./{{ cloud_name }}_key"
          authorize: yes
        parents: "interface Tunnel{{ item.index }}"
        lines:
          - "ip address {{ item.src_ip_addr }}"
          - "tunnel source {{ hostvars[item.src_host].interfaces[0].private_ip_address }}"
          - "tunnel destination {{ hostvars[item.dst_host].interfaces[0].public_ip_address }}"
          - "tunnel key {{ item.key }}"
          - tunnel path-mtu-discovery
          - tunnel ttl 255
          - mtu 1476
      with_items: "{{ tunnels }}"

    - name: Configure BGP on the source
      eos_config:
        provider:
          username: ec2-user
          host: "{{ hostvars[item.src_host].ansible_host }}"
          ssh_keyfile: "./{{ cloud_name }}_key"
          authorize: yes
        parents: "router bgp {{ hostvars[item.src_host].cloud_vpc_data.bgp_asn }}"
        lines:
          - "neighbor {{ item.dst_ip_addr | ipaddr('address') }} remote-as {{ hostvars[item.dst_host].cloud_vpc_data.bgp_asn }}"
      with_items: "{{ tunnels }}"

    - name: Create the destination end of tunnel
      eos_config:
        provider:
          username: ec2-user
          host: "{{ hostvars[item.dst_host].ansible_host }}"
          ssh_keyfile: "./{{ cloud_name }}_key"
          authorize: yes
        parents: "interface Tunnel{{ item.index }}"
        lines:
          - "ip address {{ item.dst_ip_addr }}"
          - "tunnel source {{ hostvars[item.dst_host].interfaces[0].private_ip_address }}"
          - "tunnel destination {{ hostvars[item.src_host].interfaces[0].public_ip_address }}"
          - "tunnel key {{ item.key }}"
          - tunnel path-mtu-discovery
          - tunnel ttl 255
          - mtu 1476
      with_items: "{{ tunnels }}"

    - name: Configure BGP on the destination
      eos_config:
        provider:
          username: ec2-user
          host: "{{ hostvars[item.dst_host].ansible_host }}"
          ssh_keyfile: "./{{ cloud_name }}_key"
          authorize: yes
        parents: "router bgp {{ hostvars[item.dst_host].cloud_vpc_data.bgp_asn }}"
        lines:
          - "neighbor {{ item.src_ip_addr | ipaddr('address') }} remote-as {{ hostvars[item.src_host].cloud_vpc_data.bgp_asn }}"
      with_items: "{{ tunnels }}"
